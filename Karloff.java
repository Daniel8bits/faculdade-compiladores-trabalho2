/* Generated By:JavaCC: Do not edit this line. Karloff.java */
import java.io.*;
import java.util.ArrayList;
import ast.*;

public class Karloff implements KarloffConstants {
  public static void main(String args[]) throws ParseException,IOException {
    Karloff analisador = new Karloff(new FileInputStream(args[0]));
    Transpiler transpiler = new Transpiler(analisador.Karloff());

    if (args.length == 1) {
      transpiler.transpile(args[0] + ".cpp");
    } else if (args.length == 2) {
      transpiler.compile(args[0] + ".cpp", args[1]);
    }
  }

//| <ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>
//| <: "">

/*
void Karloff () :
{Token t;}
{

(
  <VOID> <MAIN> <APAR> <FPAR> { System.out.println("Palavra reservada: main");}
| <ACHAVES> { System.out.println("Abre chaves: {");}
| <FCHAVES> { System.out.println("Fecha chaves: }");}
| <>
| t=<NUMLITERAL> { System.out.println("NÃºmero: "+ t.image);}
| t=<ID> { System.out.println("Identificador: "+ t.image);}
)*
<EOF> 

}
*/
  static final public Prog Karloff() throws ParseException {
 Main m; ArrayList<Fun> funs = new ArrayList<Fun>();
    m = MainF();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
      Func(funs);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
   {if (true) return new Prog(m, funs);}
    throw new Error("Missing return statement in function");
  }

  static final public Main MainF() throws ParseException {
  ArrayList<VarDecl> vars = new ArrayList<VarDecl>();
  ArrayList<Comando> coms = new ArrayList<Comando>();
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(APAR);
    jj_consume_token(FPAR);
    jj_consume_token(ACHAVES);
    VarDeclL(vars, coms);
    jj_consume_token(FCHAVES);
   {if (true) return new Main(vars, coms);}
    throw new Error("Missing return statement in function");
  }

/*
void VarDeclF (ArrayList<VarDecl> vars) :
{String tipo; Token id;}
{
  (<NEWVAR> tipo=Tipo() id=<ID> {vars.add(new VarDecl(tipo, id.image));} <SEMICOLON> VarDeclL(vars))?
}
*/
  static final public void VarDeclL(ArrayList<VarDecl> vars, ArrayList<Comando> coms) throws ParseException {
 String tipo; Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEWVAR:
      jj_consume_token(NEWVAR);
      tipo = Tipo();
      id = jj_consume_token(ID);
      jj_consume_token(SEMICOLON);
                                            vars.add(new VarDecl(tipo, id.image));
      VarDeclL(vars, coms);
      break;
    default:
      jj_la1[1] = jj_gen;
      SeqComandos(coms);
    }
  }

  static final public String Tipo() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      break;
    case VOID:
      t = jj_consume_token(VOID);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public void SeqComandos(ArrayList<Comando> coms) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINTOUT:
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      ComandoF(coms);
    }
  }

  static final public void ComandoF(ArrayList<Comando> coms) throws ParseException {
  Token id = null;
  Token readInput = null;
  ArrayList<Exp> exps = new ArrayList<Exp>();

  Exp expIfOrAttrib = null;
  Exp expWhile = null;
  Exp expReturn = null;
  Exp expPrint = null;
  ArrayList<Comando> body = new ArrayList<Comando>();

  Exp result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case APAR:
        case TRUE:
        case FALSE:
        case ID:
        case NUMLITERAL:
          expIfOrAttrib = ExpF(false);
          jj_consume_token(SEMICOLON);
                                           coms.add(new CAtribuicao(0, id.image, expIfOrAttrib));
          break;
        case READINPUT:
          readInput = jj_consume_token(READINPUT);
          jj_consume_token(APAR);
          jj_consume_token(FPAR);
          jj_consume_token(SEMICOLON);
                                                     coms.add(new CReadInput(0, id.image));
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case APAR:
        jj_consume_token(APAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case APAR:
        case TRUE:
        case FALSE:
        case ID:
        case NUMLITERAL:
          ListaExp(exps);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        jj_consume_token(FPAR);
        jj_consume_token(SEMICOLON);
                                                 coms.add(new CChamadaFun(0, id.image, exps));
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case IF:
      jj_consume_token(IF);
      expIfOrAttrib = ExpF(false);
      jj_consume_token(THEN);
      jj_consume_token(ACHAVES);
      SeqComandos(body);
      jj_consume_token(FCHAVES);
      jj_consume_token(SEMICOLON);
                                                                                           coms.add(new CIf(0, expIfOrAttrib, body));
      break;
    case WHILE:
      jj_consume_token(WHILE);
      expWhile = ExpF(false);
      jj_consume_token(ACHAVES);
      SeqComandos(body);
      jj_consume_token(FCHAVES);
      jj_consume_token(SEMICOLON);
                                                                                  coms.add(new CWhile(0, expWhile, body));
      break;
    case RETURN:
      jj_consume_token(RETURN);
      expReturn = ExpF(false);
      jj_consume_token(SEMICOLON);
                                              coms.add(new CReturn(0, expReturn));
      break;
    case PRINTOUT:
      jj_consume_token(PRINTOUT);
      expPrint = ExpF(false);
      jj_consume_token(SEMICOLON);
                                               coms.add(new CPrint(0, expPrint));
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Exp ExpF(boolean parentheses) throws ParseException {
 String op; Exp opnd1; Exp opnd2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case ID:
    case NUMLITERAL:
      opnd1 = Fator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPSUM:
      case OPSUB:
      case OPMUT:
      case OPDIV:
      case OPAND:
      case OPOR:
      case OPLT:
      case OPGT:
      case OPEQ:
        op = Op();
        opnd2 = ExpF(false);
                                            {if (true) return new EOpExp(op, opnd1, opnd2, parentheses);}
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
                                                                                                  {if (true) return opnd1;}
      break;
    case APAR:
      jj_consume_token(APAR);
      opnd1 = ExpF(true);
      jj_consume_token(FPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPSUM:
      case OPSUB:
      case OPMUT:
      case OPDIV:
      case OPAND:
      case OPOR:
      case OPLT:
      case OPGT:
      case OPEQ:
        op = Op();
        opnd2 = ExpF(false);
                                                             {if (true) return new EOpExp(op, opnd1, opnd2, parentheses);}
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
                                                                                                                   {if (true) return opnd1;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Fator() throws ParseException {
  Token efloat = null;
  Token etrue = null;
  Token efalse = null;
  Token id;
  ArrayList<Exp> args = new ArrayList<Exp>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APAR:
        jj_consume_token(APAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case APAR:
        case TRUE:
        case FALSE:
        case ID:
        case NUMLITERAL:
          ListaExp(args);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        jj_consume_token(FPAR);
                                             {if (true) return new EChamadaFun(id.image, args);}
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
                                                                                         {if (true) return new EVar(id.image);}
      break;
    case NUMLITERAL:
      efloat = jj_consume_token(NUMLITERAL);
  float f = 0;
  try {
    f = Float.parseFloat(efloat.image);
  } catch (Exception e) {}
  {if (true) return new EFloat(f);}
      break;
    case TRUE:
      etrue = jj_consume_token(TRUE);
                {if (true) return new ETrue();}
      break;
    case FALSE:
      efalse = jj_consume_token(FALSE);
                  {if (true) return new EFalse();}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Op() throws ParseException {
 Token op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPSUM:
      op = jj_consume_token(OPSUM);
      break;
    case OPSUB:
      op = jj_consume_token(OPSUB);
      break;
    case OPMUT:
      op = jj_consume_token(OPMUT);
      break;
    case OPDIV:
      op = jj_consume_token(OPDIV);
      break;
    case OPAND:
      op = jj_consume_token(OPAND);
      break;
    case OPOR:
      op = jj_consume_token(OPOR);
      break;
    case OPLT:
      op = jj_consume_token(OPLT);
      break;
    case OPGT:
      op = jj_consume_token(OPGT);
      break;
    case OPEQ:
      op = jj_consume_token(OPEQ);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return op.image;}
    throw new Error("Missing return statement in function");
  }

  static final public void ListaExp(ArrayList<Exp> exps) throws ParseException {
 Exp exp;
    exp = ExpF(false);
                   exps.add(exp);
    ListaExpL(exps);
  }

  static final public void ListaExpL(ArrayList<Exp> exps) throws ParseException {
 Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      exp = ExpF(false);
                            exps.add(exp);
      ListaExpL(exps);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  static final public void Func(ArrayList<Fun> funs) throws ParseException {
    label_2:
    while (true) {
      Func2(funs);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUN:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_2;
      }
    }
  }

  static final public void Func2(ArrayList<Fun> funs) throws ParseException {
  Token nome;
  ArrayList<ParamFormalFun> params = new ArrayList<ParamFormalFun>();
  String retorno;
  ArrayList<VarDecl> vars = new ArrayList<VarDecl>();
  ArrayList<Comando> body = new ArrayList<Comando>();
    jj_consume_token(FUN);
    retorno = Tipo();
    nome = jj_consume_token(ID);
    jj_consume_token(APAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
    case FLOAT:
    case BOOLEAN:
      ListaArg(params);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(FPAR);
    jj_consume_token(ACHAVES);
    VarDeclL(vars, body);
    jj_consume_token(FCHAVES);
     funs.add(new Fun(nome.image, params, retorno, vars, body));
  }

  static final public void ListaArg(ArrayList<ParamFormalFun> params) throws ParseException {
 String tipo; Token id;
    tipo = Tipo();
    id = jj_consume_token(ID);
                       params.add(new ParamFormalFun(tipo, id.image));
    ListaArgL(params);
  }

  static final public void ListaArgL(ArrayList<ParamFormalFun> params) throws ParseException {
 String tipo; Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      tipo = Tipo();
      id = jj_consume_token(ID);
                                params.add(new ParamFormalFun(tipo, id.image));
      ListaArgL(params);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public KarloffTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x800,0x6020,0x350000,0xc80080,0xc00080,0x8080,0x350000,0xff000000,0xff000000,0xc00080,0xc00080,0x80,0xc00000,0xff000000,0x0,0x0,0x6020,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0x0,0x0,0x400,0xc00,0xc00,0x0,0x400,0x1,0x1,0xc00,0xc00,0x0,0xc00,0x1,0x2,0x4,0x0,0x2,};
   }

  /** Constructor with InputStream. */
  public Karloff(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Karloff(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KarloffTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Karloff(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KarloffTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Karloff(KarloffTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(KarloffTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
