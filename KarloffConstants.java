/* Generated By:JavaCC: Do not edit this line. KarloffConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface KarloffConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int VOID = 5;
  /** RegularExpression Id. */
  int MAIN = 6;
  /** RegularExpression Id. */
  int APAR = 7;
  /** RegularExpression Id. */
  int FPAR = 8;
  /** RegularExpression Id. */
  int ACHAVES = 9;
  /** RegularExpression Id. */
  int FCHAVES = 10;
  /** RegularExpression Id. */
  int NEWVAR = 11;
  /** RegularExpression Id. */
  int SEMICOLON = 12;
  /** RegularExpression Id. */
  int FLOAT = 13;
  /** RegularExpression Id. */
  int BOOLEAN = 14;
  /** RegularExpression Id. */
  int ASSIGN = 15;
  /** RegularExpression Id. */
  int IF = 16;
  /** RegularExpression Id. */
  int THEN = 17;
  /** RegularExpression Id. */
  int WHILE = 18;
  /** RegularExpression Id. */
  int READINPUT = 19;
  /** RegularExpression Id. */
  int RETURN = 20;
  /** RegularExpression Id. */
  int PRINTOUT = 21;
  /** RegularExpression Id. */
  int TRUE = 22;
  /** RegularExpression Id. */
  int FALSE = 23;
  /** RegularExpression Id. */
  int OPSUM = 24;
  /** RegularExpression Id. */
  int OPSUB = 25;
  /** RegularExpression Id. */
  int OPMUT = 26;
  /** RegularExpression Id. */
  int OPDIV = 27;
  /** RegularExpression Id. */
  int OPAND = 28;
  /** RegularExpression Id. */
  int OPOR = 29;
  /** RegularExpression Id. */
  int OPLT = 30;
  /** RegularExpression Id. */
  int OPGT = 31;
  /** RegularExpression Id. */
  int OPEQ = 32;
  /** RegularExpression Id. */
  int COMMA = 33;
  /** RegularExpression Id. */
  int FUN = 34;
  /** RegularExpression Id. */
  int LETTER = 35;
  /** RegularExpression Id. */
  int DIGIT = 36;
  /** RegularExpression Id. */
  int DIGITS = 37;
  /** RegularExpression Id. */
  int OPTFRAC = 38;
  /** RegularExpression Id. */
  int OPTEXP = 39;
  /** RegularExpression Id. */
  int LETTERORDIGIT = 40;
  /** RegularExpression Id. */
  int UNDERSCOREDEND = 41;
  /** RegularExpression Id. */
  int ID = 42;
  /** RegularExpression Id. */
  int NUMLITERAL = 43;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"void\"",
    "\"main\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"newVar\"",
    "\";\"",
    "\"float\"",
    "\"boolean\"",
    "\"=\"",
    "\"if\"",
    "\"then\"",
    "\"while\"",
    "\"readInput\"",
    "\"return\"",
    "\"printOut\"",
    "\"true\"",
    "\"false\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"<\"",
    "\">\"",
    "\"==\"",
    "\",\"",
    "\"fun\"",
    "<LETTER>",
    "<DIGIT>",
    "<DIGITS>",
    "<OPTFRAC>",
    "<OPTEXP>",
    "<LETTERORDIGIT>",
    "<UNDERSCOREDEND>",
    "<ID>",
    "<NUMLITERAL>",
  };

}
